class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean vis[]= new boolean[V];
        int parent[] = new int[V];
        Arrays.fill(parent,-1);
        
        for(int i=0;i<V;i++)
        {
            if(vis[i]==false)
            {
                if(checkforcycle(adj,i,vis,parent))
                {
                    return true;
                }
            }
        }
        return false;
    }
    
    static boolean checkforcycle(ArrayList<ArrayList<Integer>> adj,int i,boolean vis[],int parent[])
    {
        Queue<Node> q=new LinkedList<>();
        q.add(new Node(i,-1));
        vis[i]=true;
        
        while(!q.isEmpty())
        {
                int node=q.peek().first;
                int par=q.peek().second;
                q.remove();
                
                for(int it:adj.get(node))
                {
                    if(vis[it]==false)
                    {
                        q.add(new Node(it,node));
                        vis[it]=true;
                    }
                    else if(par!=it)
                    {
                        return true;
                    }
                }
        }
        return false;
    }
    
}
class Node
{
    int first;
    int second;
    public Node(int first,int second)
    {
        this.first=first;
        this.second=second;
    }
}
