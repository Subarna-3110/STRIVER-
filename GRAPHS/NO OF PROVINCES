class Solution {
    public int findCircleNum(int[][] isConnected) {
        int v=isConnected.length;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();

        for(int i=0;i<v;i++)
        {
            adj.add(new ArrayList<Integer>());
        }

        for(int i=0;i<isConnected.length;i++)
        {
            for(int j=0;j<isConnected[0].length;j++)
            {
                if(isConnected[i][j]==1 && i!=j)
                {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }

        boolean[] visited =new boolean[v];

        int count=0;
        for(int i=0;i<v;i++)
        {
            if(!visited[i])
            {
                count++;
                dfs(i,adj,visited);
            }
        }
        return count;
    }

    public void dfs(int node,ArrayList<ArrayList<Integer>> adj,boolean visited[])
    {
        visited[node]=true;
        for(int it:adj.get(node))
        {
            if(!visited[it])
            {
            dfs(it,adj,visited);
            }
        }
    }
}
