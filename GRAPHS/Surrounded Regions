class Solution {
    static void dfs(int row,int col,int vis[][],char mat[][])
    {
        vis[row][col]= 1;
        int n = mat.length;
        int m = mat[0].length;
        int dx[]={0,0,1,-1};
        int dy[]={1,-1,0,0};

        for(int i=0;i<4;i++)
        {
            int nrow=row+dx[i];
            int ncol=col+dy[i];
            if(nrow >=0 && nrow <n && ncol >= 0 && ncol < m 
            && vis[nrow][ncol] == 0 && mat[nrow][ncol] == 'O')
            {
                dfs(nrow,ncol,vis,mat);
            }
        }

    }
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;

        int vis[][]=new int[n][m];
        // traversing row
        for(int j=0;j<m;j++)
        {
            if(vis[0][j]==0 && board[0][j]=='O')
            {
                dfs(0,j,vis,board);
            }

            if(vis[n-1][j]==0 && board[n-1][j]=='O')
            {
                dfs(n-1,j,vis,board);
            }
        } 

        //traversing column
        for(int i=0;i<n;i++)
        {
            if(vis[i][0]==0 && board[i][0]=='O')
            {
                dfs(i,0,vis,board);
            }
            if(vis[i][m-1]==0 && board[i][m-1]=='O')
            {
                dfs(i,m-1,vis,board);
            }
        } 

         for(int i = 0;i<n;i++) {
            for(int j= 0 ;j<m;j++) {
                if(vis[i][j] == 0 && board[i][j] == 'O') 
                    board[i][j] = 'X'; 
            }
        }

       for(int i = 0;i<n;i++) {
            for(int j= 0 ;j<m;j++) {
               System.out.print(board[i][j]);
            }
            System.out.println();
        } 
    }
}.
