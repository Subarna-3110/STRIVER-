class Solution
{
    //Function to find distance of nearest 1 in the grid for each cell.
    public int[][] nearest(int[][] grid)
    {
       int n=grid.length;
       int m=grid[0].length;
       
       int[][] vis=new int[n][m];
       int[][] dis=new int[n][m];
       
       Queue<Node> q=new LinkedList<>();
       
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(grid[i][j]==1)
               {
                   q.add(new Node(i,j,0));
                   vis[i][j]=1;
               }
           }
       }
       
       
       int dx[]={0,0,1,-1};
       int dy[]={1,-1,0,0};
       
       while(!q.isEmpty())
       {
           int row=q.peek().f;
           int col=q.peek().s;
           int steps=q.peek().t;
           
           q.remove();
           
           dis[row][col]=steps;
           
           for(int i=0;i<4;i++)
           {
               int nrow=dx[i]+row;
               int ncol=dy[i]+col;
               
               if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0)
               {
                   vis[nrow][ncol]=1;
                   q.add(new Node(nrow,ncol,steps+1));
                   
               }
           }
           
       }
       
       return dis;
    }
}
class Node
{
    int f,s,t;
    
    public Node(int f,int s,int t)
    {
        this.f=f;
        this.s=s;
        this.t=t;
    }
}
