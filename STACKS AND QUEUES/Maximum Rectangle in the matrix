class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix==null ||matrix[0].length==0) return 0;

        int col=matrix[0].length;
        int[] height=new int[col];
        int max=0;

        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<col;j++)
            {
                height[j]=(matrix[i][j]=='1') ? height[j]+1 :0;
            }

            max =Math.max(max,LRA(height));
        }
         return max;
    }

    public int LRA(int[] height)
    {
        int n=height.length;
        int[] left=new int[n];
        int[] right=new int[n];


        Stack<Integer> stack=new Stack<>();

       for (int i = 0; i < n; i++) 
       {
        while(!stack.isEmpty() && height[stack.peek()]>height[i])
        {
            stack.pop();
        }

        left[i]=stack.isEmpty()?-1:stack.peek();
        stack.push(i);
       }

       stack.clear();
       for(int i=n-1;i>=0;i--)
       {

        while(!stack.isEmpty() && height[stack.peek()]>=height[i])
        {
            stack.pop();
        }

        right[i]=stack.isEmpty()?n:stack.peek();
        stack.push(i);
       }

       
        int max=0;
       for(int i=0;i<n;i++)
       {
        int width=right[i]-left[i]-1;
        int area=height[i]*width;
        max=Math.max(max,area);
       }
       return max;

    }
}
