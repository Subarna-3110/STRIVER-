(A + B) * (C - D)     BECOMES    AB+CD-*
A + B * C               ABC*+\
A * B + C               AB*C+
A^B^C                   ABC^^
a - b - c               a b - c -
A ^ B * C ^ D          	AB^CD^*


import java.util.*;

class InfixToPostfix {

    static int precedence(char ch) {
        switch (ch) {
            case '^': return 3;
            case '*':
            case '/': return 2;
            case '+':
            case '-': return 1;
            default: return -1;
        }
    }

    static boolean isOperator(char ch) {
        return "+-*/^".indexOf(ch) != -1;
    }

    static String convert(String expr) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < expr.length(); i++) {
            char ch = expr.charAt(i);

            // If operand, add to result
            if (Character.isLetterOrDigit(ch)) {
                result.append(ch);
            }

            // If '(', push to stack
            else if (ch == '(') {
                stack.push(ch);
            }

            // If ')', pop until '('
            else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop(); // pop '('
            }

            // If operator
            else if (isOperator(ch)) {
                while (!stack.isEmpty() && precedence(ch) <= precedence(stack.peek())) {
                    // For ^ operator (right associative)
                    if (ch == '^' && stack.peek() == '^') break;
                    result.append(stack.pop());
                }
                stack.push(ch);
            }
        }

        // Pop remaining operators
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String infix = "((A+B)*(C-D))";
        System.out.println("Infix: " + infix);
        System.out.println("Postfix: " + convert(infix));
    }
}
