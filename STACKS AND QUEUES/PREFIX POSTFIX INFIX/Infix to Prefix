import java.util.*;

class InfixToPrefix {

    static int precedence(char ch) {
        switch (ch) {
            case '^': return 3;
            case '*':
            case '/': return 2;
            case '+':
            case '-': return 1;
            default: return -1;
        }
    }

    static boolean isOperator(char ch) {
        return "+-*/^".indexOf(ch) != -1;
    }

    static String reverseAndSwap(String expr) {
        StringBuilder sb = new StringBuilder(expr);
        sb.reverse();
        for (int i = 0; i < sb.length(); i++) {
            if (sb.charAt(i) == '(') sb.setCharAt(i, ')');
            else if (sb.charAt(i) == ')') sb.setCharAt(i, '(');
        }
        return sb.toString();
    }

    static String infixToPostfixWithYourStyle(String expr) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < expr.length(); i++) {
            char ch = expr.charAt(i);

            if (Character.isLetterOrDigit(ch)) {
                result.append(ch);
            } else if (ch == '(') {
                stack.push(ch);
            } else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop(); // remove '('
            } else if (isOperator(ch)) {
                while (!stack.isEmpty() && precedence(ch) <= precedence(stack.peek())) {
                    // Right-associative check for '^'
                    if (ch == '^' && stack.peek() == '^') break;
                    result.append(stack.pop());
                }
                stack.push(ch);
            }
        }

        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();
    }

    static String convertToPrefix(String infix) {
        String reversed = reverseAndSwap(infix);                 // Step 1 & 2
        String postfix = infixToPostfixWithYourStyle(reversed); // Step 3
        return new StringBuilder(postfix).reverse().toString();  // Step 4
    }

    public static void main(String[] args) {
        String infix = "((A+B)*(C-D))";
        System.out.println("Infix: " + infix);
        System.out.println("Prefix: " + convertToPrefix(infix));
    }
}
