class DoublyLinkedList {
    static class Node {
        int data;
        Node prev, next;
        Node(int data) {
            this.data = data;
        }
    }

    Node head;
    public void append(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node curr = head;
        while (curr.next != null)
            curr = curr.next;

        curr.next = newNode;
        newNode.prev = curr;
    }

    public void deleteAllOccurrences(int key) {
        Node curr = head;

        while (curr != null) {
            if (curr.data == key) {
                Node prevNode = curr.prev;
                Node nextNode = curr.next;

                // If it's head node
                if (prevNode == null) {
                    head = nextNode;
                    if (head != null)
                        head.prev = null;
                } else {
                    prevNode.next = nextNode;
                }

                if (nextNode != null)
                    nextNode.prev = prevNode;
            }

            curr = curr.next;
        }
    }

    // Utility function to print the list
    public void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }


    public static void main(String[] args) {
        DoublyLinkedList dll = new DoublyLinkedList();
        dll.append(10);
        dll.append(20);
        dll.append(10);
        dll.append(30);
        dll.append(10);

        System.out.print("Original DLL: ");
        dll.printList(); // Output: 10 20 10 30 10

        dll.deleteAllOccurrences(10);

        System.out.print("After deleting 10: ");
        dll.printList(); // Output: 20 30
    }
}
