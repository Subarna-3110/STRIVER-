class Solution {
    // Function to sort an array using quick sort algorithm.
    static void quickSort(int arr[], int low, int high) {
        if (low < high) {
            // Partition the array and get the pivot index
            int pivotIndex = partition(arr, low, high);

            // Recursively sort elements before and after the partition
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    // Function to partition the array and return the pivot index
    static int partition(int arr[], int low, int high) {
        int pivot = arr[low];
        int i = low;
        int j = high;

        while (i < j) {
            // Increment i while arr[i] <= pivot and i is within bounds
            while (arr[i] <= pivot && i < high) {
                i++;
            }

            // Decrement j while arr[j] > pivot and j is within bounds
            while (arr[j] > pivot && j > low) {
                j--;
            }

            // Swap elements if i is still less than j
            if (i < j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap the pivot element with the element at j
        int temp = arr[low];
        arr[low] = arr[j];
        arr[j] = temp;

        // Return the partition index
        return j;
    }

 
}
