class Solution {
    public int numDistinct(String s, String t) {
        int m = s.length();
        int n = t.length();

        // Create a DP table with dimensions (m+1) x (n+1)
        int[][] dp = new int[m + 1][n + 1];

        // Base case: If t is an empty string, there is exactly one subsequence of any s that matches t: the empty subsequence
        for (int i = 0; i <= m; i++) {
            dp[i][0] = 1;
        }

        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
                } else {
                   
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

    
        return dp[m][n];
    }
}
