import java.util.Scanner;

public class EditDistance {

    public static int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        
        // DP table of size (m+1) x (n+1)
        int[][] dp = new int[m + 1][n + 1];
        
        // Initialize the table
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i; // If word2 is empty, delete all characters of word1
        }
        for (int j = 0; j <= n; j++) {
            dp[0][j] = j; // If word1 is empty, insert all characters of word2
        }
        
        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1]; // No operation needed if characters match
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j] + 1,    // Deletion
                                        Math.min(dp[i][j - 1] + 1,    // Insertion
                                                 dp[i - 1][j - 1] + 1)); // Replacement
                }
            }
        }
        
        // The final answer is in dp[m][n]
        return dp[m][n];
    }

    public static void main(String[] args) {
        // Taking input from user
        Scanner scanner = new Scanner(System.in);

        // Input first word
        System.out.print("Enter the first word: ");
        String word1 = scanner.nextLine();
        
        // Input second word
        System.out.print("Enter the second word: ");
        String word2 = scanner.nextLine();
        
        // Compute and print the result
        int result = minDistance(word1, word2);
        System.out.println("Minimum edit distance: " + result);
        
        // Close the scanner
        scanner.close();
    }
}
