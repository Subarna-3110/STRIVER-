import java.util.Scanner;

public class CoinChange {
    public static int minCoins(int[] coins, int sum) {
        int n = coins.length;
        int[][] t = new int[n + 1][sum + 1];

        // Initialize the DP table
        for (int j = 1; j <= sum; j++) {
            t[0][j] = Integer.MAX_VALUE; // No coins means we can't make positive sums
        }
        for (int i = 0; i <= n; i++) {
            t[i][0] = 0; // Zero sum requires zero coins
        }

        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                if (j >= coins[i - 1]) {
                    t[i][j] = Math.min(t[i - 1][j], 1 + t[i][j - coins[i - 1]]);
                } else {
                    t[i][j] = t[i - 1][j]; // Can't use this coin
                }
            }
        }

        // Result is in t[n][sum]
        return t[n][sum] == Integer.MAX_VALUE ? -1 : t[n][sum];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the number of coin types
        System.out.print("Enter number of coin types: ");
        int n = scanner.nextInt();
        
        int[] coins = new int[n];
        
        // Read the coin denominations
        System.out.print("Enter coin denominations: ");
        for (int i = 0; i < n; i++) {
            coins[i] = scanner.nextInt();
        }
        
        // Read the target sum
        System.out.print("Enter the target sum: ");
        int sum = scanner.nextInt();
        
        int result = minCoins(coins, sum);
        System.out.println("Minimum number of coins needed: " + result);
        
        scanner.close();
    }
}
