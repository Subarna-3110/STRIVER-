class Solution {
    static Boolean isSubsetSum(int N, int arr[], int sum) {
        // Create a DP table
        boolean[][] dp = new boolean[N + 1][sum + 1];

        // Initialize the dp array for the base cases
        for (int i = 0; i <= N; i++) {
            dp[i][0] = true; // Sum of 0 is always achievable with an empty subset
        }

        // Fill the dp table
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= sum; j++) {
                if (j >= arr[i - 1]) {
                    // Can either exclude the current element or include it
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                } else {
                    // Can't include the current element, so inherit the previous value
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[N][sum]; // Return the result for the whole array and the given sum
    }

    public static void main(String[] args) {
        // Example usage
        int arr[] = {3, 34, 4, 12, 5, 2};
        int sum = 9;
        int N = arr.length;
        
        if (isSubsetSum(N, arr, sum)) {
            System.out.println("Found a subset with the given sum.");
        } else {
            System.out.println("No subset with the given sum exists.");
        }
    }
}
