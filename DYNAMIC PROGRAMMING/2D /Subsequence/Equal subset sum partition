class Solution {
    public boolean canPartition(int[] nums) {
        int n=nums.length;
        if(findpartition(n,nums)==true)
        return true;
        else
        return false;
    }

    static boolean findpartition(int n,int nums[])
    {
        int sum=0;
        for(int it:nums)
        {
            sum+=it;
        }
        if(sum%2!=0) return false;
        sum=sum/2;

        
        Boolean dp[][]=new Boolean[n+1][sum+1];
        
        for(int i=0;i<n;i++)
        {
            dp[i][0]=true;
        }
          for (int i = 0; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                dp[i][j] = null; 
            }
        }
        return isSubsetSum(n,nums,sum,dp);

    }
    static boolean isSubsetSum(int n,int arr[],int sum,Boolean dp[][])
    {
        if(sum==0) return true;
        if(n==0)
            return false;
        

        if(dp[n][sum]!=null) return dp[n][sum];

       if(arr[n-1]>sum)
       {
        dp[n][sum]=isSubsetSum(n-1,arr,sum,dp);
       }
       else
       {
        dp[n][sum]=isSubsetSum(n-1,arr,sum,dp)||isSubsetSum(n-1,arr,sum-arr[n-1],dp);
       }

        return dp[n][sum];
    }
}
