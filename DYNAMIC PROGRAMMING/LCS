class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        char[] arr1=new char[text1.length()];
        char[] arr2=new char[text2.length()];

        for(int i=0;i< text1.length();i++)
        {
            arr1[i]=text1.charAt(i);
        }
        for(int i=0;i<text2.length();i++)
        {
            arr2[i] = text2.charAt(i);
        }
        int common_countLCS = LCS(arr1, arr2, text1.length(), text2.length());
        return common_countLCS;

    }

    public static int[][] dp;

    public static int LCS(char[] arr1,char[] arr2,int m,int n)
    {
        dp=new int[m+1][n+1];

        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                if(i==0||j==0)
                {
                    dp[i][j]=0;
                }
                else if(arr1[i-1]==arr2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }
}
